/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT_L 0
#define SYMBOLS_L 1
#define ARROWS_L  2
#define NUMBERS_L 3


/ {

	behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | LGUI |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | NUM LYR |
//                    | CTRL | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U &kp I &kp O &kp P   &kp BSPC
   &kp TAB   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J &kp K &kp L &kp SEMI   &kp SQT
   &kp LGUI   &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M &kp COMMA &kp DOT &kp FSLH   &mo 2
                  &kp LCTRL &mo 3 &mt RALT RET   &mt LSHIFT SPACE &mo 1 &kp RALT
                        >;
                };

                symbols_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC  &kp EXCL   &kp AT   &kp LBRC   &kp RBRC   &kp PIPE   	  &kp QMARK &kp UNDER  &kp BSLH    &kp ASTRK &none &kp BSPC
   &kp TAB   &kp HASH   &kp DLLR   &kp LPAR   &kp RPAR   &kp GRAVE      &kp PLUS &kp MINUS &kp FSLH   &kp RBKT &kp LCTRL &kp GRAVE
   &kp LALT   &kp PRCNT   &kp CARET   &kp LBKT   &kp RBKT   &kp TILDE    &kp AMPS &kp EQUAL &kp COMMA   &kp DOT &kp NON_US_BSLH &none
                    	     &kp LCTRL &trans   &mt RALT BSPC   &mt LSHIFT SPACE   &trans    &kp RALT
                        >;
                };

                arrows_layer {
                        bindings = <
   &kp ESC   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR        &none &none &none &kp UP &none &kp BSPC
   &kp TAB &none  &kp C_PP   &kp C_VOL_DN   &kp C_VOL_UP &kp C_BRI_UP              &none &none &kp LEFT  &kp DOWN &kp RIGHT &none
   &kp RALT &kp LALT   &none   &kp C_PREV &kp C_NEXT &kp C_BRI_DN                         &none &kp BSPC &none &none &none &trans 
                    	     &kp LCMD &kp LSHFT   &mt RALT RET                        &mt LSHIFT SPACE &kp RALT   &kp LCTRL
                        >;
                };

                numbers_layer {
                        bindings = <
   &kp ESC  &none &none &none &none &none                 &none &hm F7 N7      &hm F8 N8      &hm F9 N9 &none &kp BSPC
   &kp TAB   &none &none   &none   &kp STAR &kp PLUS           &kp EQUAL &hm F4 N4      &hm F5 N5      &hm F6 N6 &kp DOT &kp RET
   &kp LCTRL &none   &none   &none      &kp FSLH &kp MINUS       &hm F10 N0		&hm F1 N1      &hm F2 N2      &hm F3 N3 &kp COMMA &to ARROWS_L
                    	     &kp LCMD &kp LSHFT   &mt RALT RET  &mt LSHIFT SPACE &kp SPACE    &none
                        >;
                };
        };
};
